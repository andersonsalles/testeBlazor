@page "/"
@using System.Net
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using testeBlazor.Models
@using testeBlazor.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService

<h3>Simple login</h3>
<div class="row  align-content-center">
    <EditForm Model="@user" OnValidSubmit="@LoginUser">
        <div>
            <br /><br /><br /><br /><br />
        </div>
        <div>
            <h3 style="font-weight:bold; color:purple">Book Stores Login</h3>
        </div>
        <div>
            <br />
        </div>
        <div class="col-12 row">
            <input class="form-control col-12" @bind="user.Username" placeholder="email address" />
        </div>
        <br />
        <div class="col-12 row">
            <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-12"></span>
            <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
            <a href="/signup" class="col-3">Sign up</a>
        </div>
        <br />
        <div class="col-12 row" style="text-align:left; font-weight:bold">
            <span class="col-12">@LoginMesssage</span>
        </div>
    </EditForm>









</div>


@code {
    public string LoginMesssage { get; set; }
    private User user;

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    public class UserForLoginDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class MyClass
    {
        public string token { get; set; }
    }


    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private async Task LoginUser()
    {

        var returnedUser = await userService.LoginAsync(user);



        if (string.IsNullOrEmpty(returnedUser))
        {
            toastService.ShowError("Invalid username or password");
            LoginMesssage = "Invalid username or password";
        }
        else
        {

            NavigationManager.NavigateTo("/index");
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            await sessionStorage.SetItemAsync("token", returnedUser);

        }

        StateHasChanged();
    }

    void Register()
    {

        NavigationManager.NavigateTo("/signup");
    }

}
