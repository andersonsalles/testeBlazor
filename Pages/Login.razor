@page "/login"
@using System.Net
@using System.Net.Http
@using testeBlazor.Models
@using testeBlazor.Services
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IUserService userService
<h3>Simple login</h3>
<div class="row  align-content-center">
    <div class="col-md-12 d-flex justify-content-center">
        <RadzenCard>
            <RadzenLogin Login="@((args) => LoginUser(args))"
                         ResetPassword="@((args) => ResetPassword(args, "Login with register and password reset"))"
                         Register="@((args) => Register())" Style="margin-bottom: 20px;" />
        </RadzenCard>
    </div>
</div>


@code {
    string userName = "admin";
    string password = "admin";
    TodoItem[] todoItems;
    private User user;

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    public class UserForLoginDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class MyClass
    {
        public string token { get; set; }
    }


    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private async Task LoginUser(LoginArgs args)
    {
        user.Username = args.Username;
        user.Password = args.Password;

        var returnedUser = await userService.LoginAsync(user);

        

        if (string.IsNullOrEmpty(returnedUser))
        {
            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error Detail", Duration = 4000 });
        }
        else
        {

            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = $"Success Detail: {returnedUser}", Duration = 4000 });

        }

        StateHasChanged();
    }

    void Register()
    {

        NavigationManager.NavigateTo("/signup");
    }

    void ResetPassword(string value, string name)
    {
        events.Add(DateTime.Now, $"{name} -> ResetPassword for user: {value}");
        StateHasChanged();
    }

    async Task ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        events.Add(DateTime.Now, $"{message.Severity} notification");
        await InvokeAsync(() => { StateHasChanged(); });
    }

}
