@page "/signup"
@using testeBlazor.Models
@using testeBlazor.Services
@inject NotificationService NotificationService
@inject IUserService userService
<h3>Signup</h3>

<EditForm Model="@user" OnValidSubmit="@RegisterUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Book Stores Register</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Username" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.ConfirmPassword" placeholder="confirm password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Sign up" />
        <a href="/" class="col-6">Already an user?</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {
    private User user;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> RegisterUser()
    {
        var returnedUser = await userService.RegisterUserAsync(user);
        if (returnedUser == null)
        {
            await ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Signup Error", Detail = "E-mail already exists!", Duration = 4000 });
            LoginMesssage = "You must choose another e-mail";
        }
        else
        {
            LoginMesssage = "Success";
        }


        return true;
    }

    async Task ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        await InvokeAsync(() => { StateHasChanged(); });
    }

}
